swagger: '2.0'
info:
  title: Innkeeper (Route Manager)
  description: |
    API for manipulating Fashion Store routes. It allows all teams to access
    and define non-wildcard paths to all relevant users in employee realm as
    well as, some service realm clients (e.g. CMS). Creation of wildcard routes
    is reserved for maintainers of this API as it requires special care.
  version: 3.0.0
host: innkeeper.host.eu
schemes:
  - https
basePath: /
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  company:
    type: oauth2
    authorizationUrl: 'https://auth.provider.com/z/XUI/#login/'
    flow: implicit
    scopes:
      routes.read: |
        Reading (listing) all the routes
      routes.write: |
        All operations on routes with strict path matching.
      routes.admin: |
        All operations on all routes, including ones with regex path matching.
paths:
  '/hosts':
    get:
      security:
        - company:
          - routes.read
      summary: Returns the list of available hosts.
      responses:
        '200':
          description: An array of available hosts.
          schema:
            type: array
            items:
              $ref: '#/definitions/Host'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/paths':
    post:
      security:
        - company:
          - routes.write
      summary: Creates a new path resource that belongs to the team of the creator.
      parameters:
        - name: path
          in: body
          description: Path to create.
          required: true
          schema:
            $ref: '#/definitions/PathIn'
      responses:
        '201':
          description: The path is created.
          schema:
            $ref: '#/definitions/PathOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      security:
        - company:
          - routes.read
      summary: A list of available paths.
      parameters:
        - name: team
          in: query
          type: string
          required: false
        - name: uri
          in: query
          type: string
          required: false
      responses:
        '200':
          description: Array of paths.
          schema:
            type: array
            items:
              $ref: '#/definitions/PathOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/paths/{id}':
    get:
      security:
        - company:
          - routes.read
      summary: Information about a single path.
      parameters:
        - name: id
          in: path
          type: string
          required: true
      responses:
        '200':
          description: A path with a given `id`.
          schema:
            $ref: '#/definitions/PathOut'
        '404':
          description: Happens when path does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/routes':
    get:
      security:
        - company:
          - routes.read
      summary: Returns the list of all the routes.
      parameters:
        - name: name
          in: query
          description: The name of the route to filter for
          required: false
          type: string
      responses:
        '200':
          description: An array of routes
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    post:
      security:
        - company:
          - routes.write
      summary: Creating a route with specified name.
      parameters:
        - name: route
          in: body
          description: Route to add.
          required: true
          schema:
            $ref: '#/definitions/RouteIn'
      responses:
        '201':
          description: The route is created.
          schema:
            $ref: '#/definitions/RouteOut'
        '403':
          description: |
            Usually happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'          
  '/current-routes':
    get:
      security:
        - company:
          - routes.read
      summary: Returns the list of all the active routes.
      responses:
        '200':
          description: An array of routes
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/routes/{id}':
    get:
      security:
        - company:
          - routes.read
      summary: Information about a single route.
      parameters:
        - name: id
          in: path
          type: string
          required: true
      responses:
        '200':
          description: A route with a given `id`.
          schema:
            $ref: '#/definitions/RouteOut'
        '404':
          description: Happens when trying to access a non-existent Route.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - company:
          - routes.write
      summary: Deletes a route
      parameters:
        - name: id
          in: path
          type: string
          required: true
      description: |
        Deleting a route is only allowed for a client that originally defined
        this route or with admin credentials.
      responses:
        '200':
          description: Information about a deleted route
          schema:
            $ref: '#/definitions/RouteOut'
        '403':
          description: |
            Usually happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Happens when trying to delete a non-existent Route.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/updated-routes/{id}':
    get:
      security:
        - company:
          - routes.read
      parameters:
        - name: id
          in: path
          type: string
          required: true
          format: ISO-8601
      summary: Returns a list of updated routes.
      responses:
        '200':
          description: An array of routes
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/deleted-routes/{id}':
    get:
      security:
        - company:
          - routes.read
      parameters:
        - name: id
          in: path
          type: string
          required: true
          format: ISO-8601
      summary: |
        Returns a list of routes that were marked to be deleted before (excluding) specified date
      responses:
        '200':
          description: An array of deleted routes
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteOut'
        '401':
          description: Happens in case of non-existent oauth credentials.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'      
        '400':
          description: Happens when provided date is in wrong format.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteDeletedRoutes
      security:
        - company:
          - routes.write
      parameters:
        - name: id
          in: path
          type: string
          required: true
          format: ISO-8601
      summary: Deleteing of routes is only allowed to the members of admin teams
      responses:
        '200':
          description: Happens in case of peration was sucessful.
        '401':
          description: Happens in case of non-existent oauth credentials.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Happens in a case of insufficient permissions.
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: Happens when provided date is in wrong format.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A processing or an unexpected error.
          schema:
            $ref: '#/definitions/Error'
definitions:
  RouteIn:
    required:
      - name
      - route
      - path_id
    properties:
      name:
        type: string
        pattern: /[A-Z][A-Z0-9_]*
        description: The name of the route in the ROUTE_NAME format
      description:
        type: string
        description: Human readable description for the route
      activate_at:
        type: string
        description: The ISO-8601 date time when the route will be activated
      route:
        $ref: '#/definitions/NewRoute'
      path_id:
        type: string
      host_ids:
        type: array
        items:
          type: string
        description: |
          Ids of the hosts to which route has to be applied. This list must be 
          a sublist of the host ids for the path. 
  RouteOut:
    required:
      - id
      - name
      - route
      - path_id
      - created_at
      - activate_at
      - owned_by_team
      - created_by
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        pattern: \[a-zA-Z][a-zA-Z0-9_]*
        description: The name of the route in the ROUTE_NAME format
      description:
        type: string
        description: Human readable description for the route
      created_at:
        type: string
        description: The ISO-8601 date time when the route has been created
      activate_at:
        type: string
        description: The ISO-8601 date time when the route will be activated
      deleted_at:
        type: string
        description: The ISO-8601 date time when the route has been deleted
      owned_by_team:
        type: string
      created_by:
        type: string
      route:
        $ref: '#/definitions/NewRoute'
      path_id:
        type: string
  NewRoute:
    required:
      - predicates
      - filters
      - endpoint
    properties:
      predicates:
        type: array
        $ref: '#/definitions/Predicate'
        description: |
          Definition of predicates to be applied
      filters:
        type: array
        $ref: '#/definitions/Filter'
        description: |
          Definition of filters to be applied. fashionStore() filter is a mandatory filter and 
          must always present
      endpoint:
        type: string
        description: |
          A valid http(s) endpoint that the request should be routed to
  Predicate:
    required:
      - name
      - args
    properties:
      name:
        type: string
        description: |
          The name of the predicate, as it is definined in Skipper
      args:
        description: The arguments for the predicate, can be string or float64
        type: array
        items:
          type: string
  Filter:
    required:
      - name
      - args
    properties:
      name:
        type: string
        description: |
          The name of the filter, as it is definined in Skipper
      args:
        description: The arguments for the filter, can be string or float64
        type: array
        items:
          type: string
  Host:
    required:
      - id
      - name
    properties:
      id:
        type: string
        format: int32
      name:
        type: string
    example: |
      {
        "id": "1",
        "name": "zalando.de"
      }
  PathIn:
    required:
      - uri
      - host_ids
    properties:
      uri:
        type: string
        description: empty uri are not allowed
        pattern: .+
      host_ids:
        type: array
        items:
          type: string
    example: |
      {
        "uri": "/cart",
        "host_ids": ["1", "2"]
      }
  PathOut:
    required:
      - id
      - owned_by_team
      - created_by
      - uri
      - host_ids
      - created_at
    properties:
      id:
        type: string
      owned_by_team:
        type: string
      created_by:
        type: string
      uri:
        type: string
      host_ids:
        type: array
        items:
          type: string
      created_at:
        type: string
        format: date-time
    example: |
      {
        "id": "1",
        "owned_by_team": "coast",
        "created_by": "user",
        "uri": "/cart",
        "host_ids": ["1", "2"],
        "created_at": "1985-04-12T23:20:50.52Z"
      }
  Error:
    required:
      - type
      - status
      - title
    properties:
      type:
        type: string
      status:
        type: integer
        format: int32
      title:
        type: string
        description: Short description of an error
      detail:
        type: string
        description: Detailed description of an error
